project Cobs is

   for Library_Name use "cobs";
   for Library_Version use "1.0.1";

   for Source_Dirs use ("src");
   for Object_Dir use "obj";
   for Create_Missing_Dirs use "True";
   for Library_Dir use "lib";

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type :=
     external ("COBS_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static"));
   for Library_Kind use Library_Type;

   type Enabled_Kind is ("enabled", "disabled");
   Compile_Checks : Enabled_Kind := External ("COBS_COMPILE_CHECKS", "enabled");
   Runtime_Checks : Enabled_Kind := External ("COBS_RUNTIME_CHECKS", "enabled");
   Style_Checks : Enabled_Kind := External ("COBS_STYLE_CHECKS", "enabled");
   Contracts_Checks : Enabled_Kind := External ("COBS_CONTRACTS", "enabled");

   type Build_Kind is ("debug", "optimize");
   Build_Mode : Build_Kind := External ("COBS_BUILD_MODE", "debug");

   Compile_Checks_Switches := ();
   case Compile_Checks is
      when "enabled" =>
         Compile_Checks_Switches :=
           ("-gnatwa",  -- All warnings
            "-gnatVa",  -- All validity checks
            "-gnatw.X", -- Disable warning may call Last_Chance_Handler
            "-gnatwe"); -- Warnings as errors
      when others => null;
   end case;

   Runtime_Checks_Switches := ();
   case Runtime_Checks is
      when "enabled" => null;
      when others =>
         Runtime_Checks_Switches :=
           ("-gnatp"); -- Supress checks
   end case;

   Style_Checks_Switches := ();
   case Style_Checks is
      when "enabled" => null;
         Style_Checks_Switches :=
           ("-gnatyg",    -- GNAT Style checks
            "-gnaty-d",   -- Disable no DOS line terminators
            "-gnaty-I",   -- Disable check mode IN keywords
            "-gnatyM100", -- Maximum line length
            "-gnatyO");   -- Overriding subprograms explicitly marked as such
      when others => null;
   end case;

   Contracts_Switches := ();
   case Contracts_Checks is
      when "enabled" => null;
         Contracts_Switches :=
           ("-gnata"); --  Enable assertions and contracts
      when others =>
   end case;

   Compiler_Switches := ();
   case Build_Mode is
      when "optimize" =>
         Compiler_Switches := ("-O3",            -- Optimization
                               "-funroll-loops", -- Unroll loops
                               "-gnatn");        -- Enable inlining
      when "debug" =>
         Compiler_Switches := ("-g",   -- Debug info
                               "-Og"); -- No optimization
   end case;

   package Compiler is
      for Default_Switches ("Ada") use
        Compile_Checks_Switches &
        Compiler_Switches &
        Runtime_Checks_Switches &
        Style_Checks_Switches &
        Contracts_Switches &
        ("-gnatQ");  -- Don't quit. Generate ALI and tree files even if illegalities
   end Compiler;

   package Binder is
      for Switches ("Ada") use ("-Es"); --  Symbolic traceback
   end Binder;

end Cobs;